***************************** 703. Kth Largest Element in a Stream  ****************************************************************************************

# Python Code 

class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.min_heap = []
        
        for num in nums:
            self.add(num)
            
    def add(self, val: int) -> int:
        
        heapq.heappush(self.min_heap , val)
        
        if len(self.min_heap) > self.k:
            
            heapq.heappop(self.min_heap)
            
        return self.min_heap[0]
        

# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)

//// C++ Code ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class KthLargest {
public:
    KthLargest(int k, vector<int>& nums) : k(k) {
            for( int num : nums){
                add(num);
            }         
    }
    
    
    int add(int val) {
        
        min_heap.push(val);
        
        if (min_heap.size() > k){
            min_heap.pop();
        }
        
        return min_heap.top();
    }
    
    private:
        int k;
        priority_queue<int,vector<int>,greater<int>> min_heap;
    
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
